/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_kuzunet(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_kuzunet(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_kuzunet(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


/* Put header files here or function declarations like below */
#include "kuzu.h"


#include <string.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_ARROW_FLAG_DICTIONARY_ORDERED_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ARROW_FLAG_NULLABLE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ARROW_FLAG_MAP_KEYS_SORTED_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowSchema_format_set(void * jarg1, char * jarg2) {
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->format = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->format, (const char *)arg2);
    } else {
      arg1->format = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArrowSchema_format_get(void * jarg1) {
  char * jresult ;
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  result = (char *) ((arg1)->format);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowSchema_name_set(void * jarg1, char * jarg2) {
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArrowSchema_name_get(void * jarg1) {
  char * jresult ;
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowSchema_metadata_set(void * jarg1, char * jarg2) {
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->metadata = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->metadata, (const char *)arg2);
    } else {
      arg1->metadata = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ArrowSchema_metadata_get(void * jarg1) {
  char * jresult ;
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  char *result = 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  result = (char *) ((arg1)->metadata);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowSchema_flags_set(void * jarg1, long long jarg2) {
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  int64_t arg2 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArrowSchema_flags_get(void * jarg1) {
  long long jresult ;
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  int64_t result;
  
  arg1 = (ArrowSchema *)jarg1; 
  result =  ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowSchema_n_children_set(void * jarg1, long long jarg2) {
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  int64_t arg2 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->n_children = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArrowSchema_n_children_get(void * jarg1) {
  long long jresult ;
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  int64_t result;
  
  arg1 = (ArrowSchema *)jarg1; 
  result =  ((arg1)->n_children);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowSchema_children_set(void * jarg1, void * jarg2) {
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  ArrowSchema **arg2 = (ArrowSchema **) 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  arg2 = (ArrowSchema **)jarg2; 
  if (arg1) (arg1)->children = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrowSchema_children_get(void * jarg1) {
  void * jresult ;
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  ArrowSchema **result = 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  result = (ArrowSchema **) ((arg1)->children);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowSchema_dictionary_set(void * jarg1, void * jarg2) {
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  ArrowSchema *arg2 = (ArrowSchema *) 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  arg2 = (ArrowSchema *)jarg2; 
  if (arg1) (arg1)->dictionary = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrowSchema_dictionary_get(void * jarg1) {
  void * jresult ;
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  ArrowSchema *result = 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  result = (ArrowSchema *) ((arg1)->dictionary);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowSchema_release_set(void * jarg1, void * jarg2) {
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  void (*arg2)(ArrowSchema *) = (void (*)(ArrowSchema *)) 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  arg2 = (void (*)(ArrowSchema *))jarg2; 
  if (arg1) (arg1)->release = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrowSchema_release_get(void * jarg1) {
  void * jresult ;
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  void (*result)(ArrowSchema *) = 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  result = (void (*)(ArrowSchema *)) ((arg1)->release);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowSchema_private_data_set(void * jarg1, void * jarg2) {
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->private_data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrowSchema_private_data_get(void * jarg1) {
  void * jresult ;
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  result = (void *) ((arg1)->private_data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArrowSchema() {
  void * jresult ;
  ArrowSchema *result = 0 ;
  
  result = (ArrowSchema *)new ArrowSchema();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrowSchema(void * jarg1) {
  ArrowSchema *arg1 = (ArrowSchema *) 0 ;
  
  arg1 = (ArrowSchema *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowArray_length_set(void * jarg1, long long jarg2) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  int64_t arg2 ;
  
  arg1 = (ArrowArray *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArrowArray_length_get(void * jarg1) {
  long long jresult ;
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  int64_t result;
  
  arg1 = (ArrowArray *)jarg1; 
  result =  ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowArray_null_count_set(void * jarg1, long long jarg2) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  int64_t arg2 ;
  
  arg1 = (ArrowArray *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->null_count = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArrowArray_null_count_get(void * jarg1) {
  long long jresult ;
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  int64_t result;
  
  arg1 = (ArrowArray *)jarg1; 
  result =  ((arg1)->null_count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowArray_offset_set(void * jarg1, long long jarg2) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  int64_t arg2 ;
  
  arg1 = (ArrowArray *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArrowArray_offset_get(void * jarg1) {
  long long jresult ;
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  int64_t result;
  
  arg1 = (ArrowArray *)jarg1; 
  result =  ((arg1)->offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowArray_n_buffers_set(void * jarg1, long long jarg2) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  int64_t arg2 ;
  
  arg1 = (ArrowArray *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->n_buffers = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArrowArray_n_buffers_get(void * jarg1) {
  long long jresult ;
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  int64_t result;
  
  arg1 = (ArrowArray *)jarg1; 
  result =  ((arg1)->n_buffers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowArray_n_children_set(void * jarg1, long long jarg2) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  int64_t arg2 ;
  
  arg1 = (ArrowArray *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->n_children = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ArrowArray_n_children_get(void * jarg1) {
  long long jresult ;
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  int64_t result;
  
  arg1 = (ArrowArray *)jarg1; 
  result =  ((arg1)->n_children);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowArray_buffers_set(void * jarg1, void * jarg2) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  void **arg2 = (void **) 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  arg2 = (void **)jarg2; 
  if (arg1) (arg1)->buffers = (void const **)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrowArray_buffers_get(void * jarg1) {
  void * jresult ;
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  void **result = 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  result = (void **) ((arg1)->buffers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowArray_children_set(void * jarg1, void * jarg2) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  ArrowArray **arg2 = (ArrowArray **) 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  arg2 = (ArrowArray **)jarg2; 
  if (arg1) (arg1)->children = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrowArray_children_get(void * jarg1) {
  void * jresult ;
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  ArrowArray **result = 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  result = (ArrowArray **) ((arg1)->children);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowArray_dictionary_set(void * jarg1, void * jarg2) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  ArrowArray *arg2 = (ArrowArray *) 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  arg2 = (ArrowArray *)jarg2; 
  if (arg1) (arg1)->dictionary = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrowArray_dictionary_get(void * jarg1) {
  void * jresult ;
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  ArrowArray *result = 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  result = (ArrowArray *) ((arg1)->dictionary);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowArray_release_set(void * jarg1, void * jarg2) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  void (*arg2)(ArrowArray *) = (void (*)(ArrowArray *)) 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  arg2 = (void (*)(ArrowArray *))jarg2; 
  if (arg1) (arg1)->release = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrowArray_release_get(void * jarg1) {
  void * jresult ;
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  void (*result)(ArrowArray *) = 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  result = (void (*)(ArrowArray *)) ((arg1)->release);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArrowArray_private_data_set(void * jarg1, void * jarg2) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->private_data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArrowArray_private_data_get(void * jarg1) {
  void * jresult ;
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  void *result = 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  result = (void *) ((arg1)->private_data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArrowArray() {
  void * jresult ;
  ArrowArray *result = 0 ;
  
  result = (ArrowArray *)new ArrowArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrowArray(void * jarg1) {
  ArrowArray *arg1 = (ArrowArray *) 0 ;
  
  arg1 = (ArrowArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_system_config_buffer_pool_size_set(void * jarg1, unsigned long long jarg2) {
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (kuzu_system_config *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->buffer_pool_size = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_system_config_buffer_pool_size_get(void * jarg1) {
  unsigned long long jresult ;
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_system_config *)jarg1; 
  result =  ((arg1)->buffer_pool_size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_system_config_max_num_threads_set(void * jarg1, unsigned long long jarg2) {
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (kuzu_system_config *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->max_num_threads = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_system_config_max_num_threads_get(void * jarg1) {
  unsigned long long jresult ;
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_system_config *)jarg1; 
  result =  ((arg1)->max_num_threads);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_system_config_enable_compression_set(void * jarg1, unsigned int jarg2) {
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  bool arg2 ;
  
  arg1 = (kuzu_system_config *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enable_compression = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_system_config_enable_compression_get(void * jarg1) {
  unsigned int jresult ;
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  bool result;
  
  arg1 = (kuzu_system_config *)jarg1; 
  result = (bool) ((arg1)->enable_compression);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_system_config_read_only_set(void * jarg1, unsigned int jarg2) {
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  bool arg2 ;
  
  arg1 = (kuzu_system_config *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->read_only = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_system_config_read_only_get(void * jarg1) {
  unsigned int jresult ;
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  bool result;
  
  arg1 = (kuzu_system_config *)jarg1; 
  result = (bool) ((arg1)->read_only);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_system_config_max_db_size_set(void * jarg1, unsigned long long jarg2) {
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (kuzu_system_config *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->max_db_size = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_system_config_max_db_size_get(void * jarg1) {
  unsigned long long jresult ;
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_system_config *)jarg1; 
  result =  ((arg1)->max_db_size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_system_config() {
  void * jresult ;
  kuzu_system_config *result = 0 ;
  
  result = (kuzu_system_config *)new kuzu_system_config();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_system_config(void * jarg1) {
  kuzu_system_config *arg1 = (kuzu_system_config *) 0 ;
  
  arg1 = (kuzu_system_config *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_database__database_set(void * jarg1, void * jarg2) {
  kuzu_database *arg1 = (kuzu_database *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (kuzu_database *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->_database = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_database__database_get(void * jarg1) {
  void * jresult ;
  kuzu_database *arg1 = (kuzu_database *) 0 ;
  void *result = 0 ;
  
  arg1 = (kuzu_database *)jarg1; 
  result = (void *) ((arg1)->_database);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_database() {
  void * jresult ;
  kuzu_database *result = 0 ;
  
  result = (kuzu_database *)new kuzu_database();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_database(void * jarg1) {
  kuzu_database *arg1 = (kuzu_database *) 0 ;
  
  arg1 = (kuzu_database *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_connection__connection_set(void * jarg1, void * jarg2) {
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (kuzu_connection *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->_connection = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_connection__connection_get(void * jarg1) {
  void * jresult ;
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  void *result = 0 ;
  
  arg1 = (kuzu_connection *)jarg1; 
  result = (void *) ((arg1)->_connection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_connection() {
  void * jresult ;
  kuzu_connection *result = 0 ;
  
  result = (kuzu_connection *)new kuzu_connection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_connection(void * jarg1) {
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  
  arg1 = (kuzu_connection *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement__prepared_statement_set(void * jarg1, void * jarg2) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->_prepared_statement = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_prepared_statement__prepared_statement_get(void * jarg1) {
  void * jresult ;
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  void *result = 0 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  result = (void *) ((arg1)->_prepared_statement);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement__bound_values_set(void * jarg1, void * jarg2) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->_bound_values = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_prepared_statement__bound_values_get(void * jarg1) {
  void * jresult ;
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  void *result = 0 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  result = (void *) ((arg1)->_bound_values);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_prepared_statement() {
  void * jresult ;
  kuzu_prepared_statement *result = 0 ;
  
  result = (kuzu_prepared_statement *)new kuzu_prepared_statement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_prepared_statement(void * jarg1) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_query_result__query_result_set(void * jarg1, void * jarg2) {
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->_query_result = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_query_result__query_result_get(void * jarg1) {
  void * jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  void *result = 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  result = (void *) ((arg1)->_query_result);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_query_result() {
  void * jresult ;
  kuzu_query_result *result = 0 ;
  
  result = (kuzu_query_result *)new kuzu_query_result();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_query_result(void * jarg1) {
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_flat_tuple__flat_tuple_set(void * jarg1, void * jarg2) {
  kuzu_flat_tuple *arg1 = (kuzu_flat_tuple *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (kuzu_flat_tuple *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->_flat_tuple = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_flat_tuple__flat_tuple_get(void * jarg1) {
  void * jresult ;
  kuzu_flat_tuple *arg1 = (kuzu_flat_tuple *) 0 ;
  void *result = 0 ;
  
  arg1 = (kuzu_flat_tuple *)jarg1; 
  result = (void *) ((arg1)->_flat_tuple);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_flat_tuple() {
  void * jresult ;
  kuzu_flat_tuple *result = 0 ;
  
  result = (kuzu_flat_tuple *)new kuzu_flat_tuple();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_flat_tuple(void * jarg1) {
  kuzu_flat_tuple *arg1 = (kuzu_flat_tuple *) 0 ;
  
  arg1 = (kuzu_flat_tuple *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_logical_type__data_type_set(void * jarg1, void * jarg2) {
  kuzu_logical_type *arg1 = (kuzu_logical_type *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (kuzu_logical_type *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->_data_type = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_logical_type__data_type_get(void * jarg1) {
  void * jresult ;
  kuzu_logical_type *arg1 = (kuzu_logical_type *) 0 ;
  void *result = 0 ;
  
  arg1 = (kuzu_logical_type *)jarg1; 
  result = (void *) ((arg1)->_data_type);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_logical_type() {
  void * jresult ;
  kuzu_logical_type *result = 0 ;
  
  result = (kuzu_logical_type *)new kuzu_logical_type();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_logical_type(void * jarg1) {
  kuzu_logical_type *arg1 = (kuzu_logical_type *) 0 ;
  
  arg1 = (kuzu_logical_type *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_value__value_set(void * jarg1, void * jarg2) {
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->_value = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value__value_get(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  void *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (void *) ((arg1)->_value);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_value__is_owned_by_cpp_set(void * jarg1, unsigned int jarg2) {
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  bool arg2 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->_is_owned_by_cpp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_value__is_owned_by_cpp_get(void * jarg1) {
  unsigned int jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  bool result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (bool) ((arg1)->_is_owned_by_cpp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_value() {
  void * jresult ;
  kuzu_value *result = 0 ;
  
  result = (kuzu_value *)new kuzu_value();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_value(void * jarg1) {
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_internal_id_t_table_id_set(void * jarg1, unsigned long long jarg2) {
  kuzu_internal_id_t *arg1 = (kuzu_internal_id_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (kuzu_internal_id_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->table_id = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_internal_id_t_table_id_get(void * jarg1) {
  unsigned long long jresult ;
  kuzu_internal_id_t *arg1 = (kuzu_internal_id_t *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_internal_id_t *)jarg1; 
  result =  ((arg1)->table_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_internal_id_t_offset_set(void * jarg1, unsigned long long jarg2) {
  kuzu_internal_id_t *arg1 = (kuzu_internal_id_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (kuzu_internal_id_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->offset = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_internal_id_t_offset_get(void * jarg1) {
  unsigned long long jresult ;
  kuzu_internal_id_t *arg1 = (kuzu_internal_id_t *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_internal_id_t *)jarg1; 
  result =  ((arg1)->offset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_internal_id_t() {
  void * jresult ;
  kuzu_internal_id_t *result = 0 ;
  
  result = (kuzu_internal_id_t *)new kuzu_internal_id_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_internal_id_t(void * jarg1) {
  kuzu_internal_id_t *arg1 = (kuzu_internal_id_t *) 0 ;
  
  arg1 = (kuzu_internal_id_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_date_t_days_set(void * jarg1, int jarg2) {
  kuzu_date_t *arg1 = (kuzu_date_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (kuzu_date_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->days = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_kuzu_date_t_days_get(void * jarg1) {
  int jresult ;
  kuzu_date_t *arg1 = (kuzu_date_t *) 0 ;
  int32_t result;
  
  arg1 = (kuzu_date_t *)jarg1; 
  result =  ((arg1)->days);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_date_t() {
  void * jresult ;
  kuzu_date_t *result = 0 ;
  
  result = (kuzu_date_t *)new kuzu_date_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_date_t(void * jarg1) {
  kuzu_date_t *arg1 = (kuzu_date_t *) 0 ;
  
  arg1 = (kuzu_date_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_timestamp_ns_t_value_set(void * jarg1, long long jarg2) {
  kuzu_timestamp_ns_t *arg1 = (kuzu_timestamp_ns_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (kuzu_timestamp_ns_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_kuzu_timestamp_ns_t_value_get(void * jarg1) {
  long long jresult ;
  kuzu_timestamp_ns_t *arg1 = (kuzu_timestamp_ns_t *) 0 ;
  int64_t result;
  
  arg1 = (kuzu_timestamp_ns_t *)jarg1; 
  result =  ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_timestamp_ns_t() {
  void * jresult ;
  kuzu_timestamp_ns_t *result = 0 ;
  
  result = (kuzu_timestamp_ns_t *)new kuzu_timestamp_ns_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_timestamp_ns_t(void * jarg1) {
  kuzu_timestamp_ns_t *arg1 = (kuzu_timestamp_ns_t *) 0 ;
  
  arg1 = (kuzu_timestamp_ns_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_timestamp_ms_t_value_set(void * jarg1, long long jarg2) {
  kuzu_timestamp_ms_t *arg1 = (kuzu_timestamp_ms_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (kuzu_timestamp_ms_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_kuzu_timestamp_ms_t_value_get(void * jarg1) {
  long long jresult ;
  kuzu_timestamp_ms_t *arg1 = (kuzu_timestamp_ms_t *) 0 ;
  int64_t result;
  
  arg1 = (kuzu_timestamp_ms_t *)jarg1; 
  result =  ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_timestamp_ms_t() {
  void * jresult ;
  kuzu_timestamp_ms_t *result = 0 ;
  
  result = (kuzu_timestamp_ms_t *)new kuzu_timestamp_ms_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_timestamp_ms_t(void * jarg1) {
  kuzu_timestamp_ms_t *arg1 = (kuzu_timestamp_ms_t *) 0 ;
  
  arg1 = (kuzu_timestamp_ms_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_timestamp_sec_t_value_set(void * jarg1, long long jarg2) {
  kuzu_timestamp_sec_t *arg1 = (kuzu_timestamp_sec_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (kuzu_timestamp_sec_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_kuzu_timestamp_sec_t_value_get(void * jarg1) {
  long long jresult ;
  kuzu_timestamp_sec_t *arg1 = (kuzu_timestamp_sec_t *) 0 ;
  int64_t result;
  
  arg1 = (kuzu_timestamp_sec_t *)jarg1; 
  result =  ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_timestamp_sec_t() {
  void * jresult ;
  kuzu_timestamp_sec_t *result = 0 ;
  
  result = (kuzu_timestamp_sec_t *)new kuzu_timestamp_sec_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_timestamp_sec_t(void * jarg1) {
  kuzu_timestamp_sec_t *arg1 = (kuzu_timestamp_sec_t *) 0 ;
  
  arg1 = (kuzu_timestamp_sec_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_timestamp_tz_t_value_set(void * jarg1, long long jarg2) {
  kuzu_timestamp_tz_t *arg1 = (kuzu_timestamp_tz_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (kuzu_timestamp_tz_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_kuzu_timestamp_tz_t_value_get(void * jarg1) {
  long long jresult ;
  kuzu_timestamp_tz_t *arg1 = (kuzu_timestamp_tz_t *) 0 ;
  int64_t result;
  
  arg1 = (kuzu_timestamp_tz_t *)jarg1; 
  result =  ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_timestamp_tz_t() {
  void * jresult ;
  kuzu_timestamp_tz_t *result = 0 ;
  
  result = (kuzu_timestamp_tz_t *)new kuzu_timestamp_tz_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_timestamp_tz_t(void * jarg1) {
  kuzu_timestamp_tz_t *arg1 = (kuzu_timestamp_tz_t *) 0 ;
  
  arg1 = (kuzu_timestamp_tz_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_timestamp_t_value_set(void * jarg1, long long jarg2) {
  kuzu_timestamp_t *arg1 = (kuzu_timestamp_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (kuzu_timestamp_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_kuzu_timestamp_t_value_get(void * jarg1) {
  long long jresult ;
  kuzu_timestamp_t *arg1 = (kuzu_timestamp_t *) 0 ;
  int64_t result;
  
  arg1 = (kuzu_timestamp_t *)jarg1; 
  result =  ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_timestamp_t() {
  void * jresult ;
  kuzu_timestamp_t *result = 0 ;
  
  result = (kuzu_timestamp_t *)new kuzu_timestamp_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_timestamp_t(void * jarg1) {
  kuzu_timestamp_t *arg1 = (kuzu_timestamp_t *) 0 ;
  
  arg1 = (kuzu_timestamp_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_interval_t_months_set(void * jarg1, int jarg2) {
  kuzu_interval_t *arg1 = (kuzu_interval_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (kuzu_interval_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->months = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_kuzu_interval_t_months_get(void * jarg1) {
  int jresult ;
  kuzu_interval_t *arg1 = (kuzu_interval_t *) 0 ;
  int32_t result;
  
  arg1 = (kuzu_interval_t *)jarg1; 
  result =  ((arg1)->months);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_interval_t_days_set(void * jarg1, int jarg2) {
  kuzu_interval_t *arg1 = (kuzu_interval_t *) 0 ;
  int32_t arg2 ;
  
  arg1 = (kuzu_interval_t *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->days = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_kuzu_interval_t_days_get(void * jarg1) {
  int jresult ;
  kuzu_interval_t *arg1 = (kuzu_interval_t *) 0 ;
  int32_t result;
  
  arg1 = (kuzu_interval_t *)jarg1; 
  result =  ((arg1)->days);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_interval_t_micros_set(void * jarg1, long long jarg2) {
  kuzu_interval_t *arg1 = (kuzu_interval_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (kuzu_interval_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->micros = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_kuzu_interval_t_micros_get(void * jarg1) {
  long long jresult ;
  kuzu_interval_t *arg1 = (kuzu_interval_t *) 0 ;
  int64_t result;
  
  arg1 = (kuzu_interval_t *)jarg1; 
  result =  ((arg1)->micros);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_interval_t() {
  void * jresult ;
  kuzu_interval_t *result = 0 ;
  
  result = (kuzu_interval_t *)new kuzu_interval_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_interval_t(void * jarg1) {
  kuzu_interval_t *arg1 = (kuzu_interval_t *) 0 ;
  
  arg1 = (kuzu_interval_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_query_summary__query_summary_set(void * jarg1, void * jarg2) {
  kuzu_query_summary *arg1 = (kuzu_query_summary *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (kuzu_query_summary *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->_query_summary = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_query_summary__query_summary_get(void * jarg1) {
  void * jresult ;
  kuzu_query_summary *arg1 = (kuzu_query_summary *) 0 ;
  void *result = 0 ;
  
  arg1 = (kuzu_query_summary *)jarg1; 
  result = (void *) ((arg1)->_query_summary);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_query_summary() {
  void * jresult ;
  kuzu_query_summary *result = 0 ;
  
  result = (kuzu_query_summary *)new kuzu_query_summary();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_query_summary(void * jarg1) {
  kuzu_query_summary *arg1 = (kuzu_query_summary *) 0 ;
  
  arg1 = (kuzu_query_summary *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_int128_t_low_set(void * jarg1, unsigned long long jarg2) {
  kuzu_int128_t *arg1 = (kuzu_int128_t *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (kuzu_int128_t *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->low = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_int128_t_low_get(void * jarg1) {
  unsigned long long jresult ;
  kuzu_int128_t *arg1 = (kuzu_int128_t *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_int128_t *)jarg1; 
  result =  ((arg1)->low);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_int128_t_high_set(void * jarg1, long long jarg2) {
  kuzu_int128_t *arg1 = (kuzu_int128_t *) 0 ;
  int64_t arg2 ;
  
  arg1 = (kuzu_int128_t *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->high = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_kuzu_int128_t_high_get(void * jarg1) {
  long long jresult ;
  kuzu_int128_t *arg1 = (kuzu_int128_t *) 0 ;
  int64_t result;
  
  arg1 = (kuzu_int128_t *)jarg1; 
  result =  ((arg1)->high);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_kuzu_int128_t() {
  void * jresult ;
  kuzu_int128_t *result = 0 ;
  
  result = (kuzu_int128_t *)new kuzu_int128_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_kuzu_int128_t(void * jarg1) {
  kuzu_int128_t *arg1 = (kuzu_int128_t *) 0 ;
  
  arg1 = (kuzu_int128_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_database_init(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  kuzu_system_config arg2 ;
  kuzu_system_config *argp2 ;
  kuzu_database *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (kuzu_system_config *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_system_config", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (kuzu_database *)kuzu_database_init((char const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_database_destroy(void * jarg1) {
  kuzu_database *arg1 = (kuzu_database *) 0 ;
  
  arg1 = (kuzu_database *)jarg1; 
  kuzu_database_destroy(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_database_set_logging_level(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  kuzu_database_set_logging_level((char const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_default_system_config() {
  void * jresult ;
  kuzu_system_config result;
  
  result = kuzu_default_system_config();
  jresult = new kuzu_system_config(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_connection_init(void * jarg1) {
  void * jresult ;
  kuzu_database *arg1 = (kuzu_database *) 0 ;
  kuzu_connection *result = 0 ;
  
  arg1 = (kuzu_database *)jarg1; 
  result = (kuzu_connection *)kuzu_connection_init(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_connection_destroy(void * jarg1) {
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  
  arg1 = (kuzu_connection *)jarg1; 
  kuzu_connection_destroy(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_connection_set_max_num_thread_for_exec(void * jarg1, unsigned long long jarg2) {
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (kuzu_connection *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  kuzu_connection_set_max_num_thread_for_exec(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_connection_get_max_num_thread_for_exec(void * jarg1) {
  unsigned long long jresult ;
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_connection *)jarg1; 
  result = kuzu_connection_get_max_num_thread_for_exec(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_connection_query(void * jarg1, char * jarg2) {
  void * jresult ;
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  char *arg2 = (char *) 0 ;
  kuzu_query_result *result = 0 ;
  
  arg1 = (kuzu_connection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (kuzu_query_result *)kuzu_connection_query(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_connection_prepare(void * jarg1, char * jarg2) {
  void * jresult ;
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  char *arg2 = (char *) 0 ;
  kuzu_prepared_statement *result = 0 ;
  
  arg1 = (kuzu_connection *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (kuzu_prepared_statement *)kuzu_connection_prepare(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_connection_execute(void * jarg1, void * jarg2) {
  void * jresult ;
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  kuzu_prepared_statement *arg2 = (kuzu_prepared_statement *) 0 ;
  kuzu_query_result *result = 0 ;
  
  arg1 = (kuzu_connection *)jarg1; 
  arg2 = (kuzu_prepared_statement *)jarg2; 
  result = (kuzu_query_result *)kuzu_connection_execute(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_connection_interrupt(void * jarg1) {
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  
  arg1 = (kuzu_connection *)jarg1; 
  kuzu_connection_interrupt(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_connection_set_query_timeout(void * jarg1, unsigned long long jarg2) {
  kuzu_connection *arg1 = (kuzu_connection *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (kuzu_connection *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  kuzu_connection_set_query_timeout(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_destroy(void * jarg1) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  kuzu_prepared_statement_destroy(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_prepared_statement_allow_active_transaction(void * jarg1) {
  unsigned int jresult ;
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  bool result;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  result = (bool)kuzu_prepared_statement_allow_active_transaction(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_prepared_statement_is_success(void * jarg1) {
  unsigned int jresult ;
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  bool result;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  result = (bool)kuzu_prepared_statement_is_success(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_prepared_statement_get_error_message(void * jarg1) {
  char * jresult ;
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *result = 0 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  result = (char *)kuzu_prepared_statement_get_error_message(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_bool(void * jarg1, char * jarg2, unsigned int jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  kuzu_prepared_statement_bind_bool(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_int64(void * jarg1, char * jarg2, long long jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t arg3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int64_t)jarg3; 
  kuzu_prepared_statement_bind_int64(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_int32(void * jarg1, char * jarg2, int jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int32_t)jarg3; 
  kuzu_prepared_statement_bind_int32(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_int16(void * jarg1, char * jarg2, short jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  int16_t arg3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int16_t)jarg3; 
  kuzu_prepared_statement_bind_int16(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_int8(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  int8_t arg3 ;
  int8_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (int8_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int8_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_int8(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_uint64(void * jarg1, char * jarg2, unsigned long long jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  uint64_t arg3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint64_t)jarg3; 
  kuzu_prepared_statement_bind_uint64(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_uint32(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint32_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_uint32(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_uint16(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16_t arg3 ;
  uint16_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint16_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint16_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_uint16(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_uint8(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8_t arg3 ;
  uint8_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint8_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint8_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_uint8(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_double(void * jarg1, char * jarg2, double jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double)jarg3; 
  kuzu_prepared_statement_bind_double(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_float(void * jarg1, char * jarg2, float jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  kuzu_prepared_statement_bind_float(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_date(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  kuzu_date_t arg3 ;
  kuzu_date_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (kuzu_date_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_date_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_date(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_timestamp_ns(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  kuzu_timestamp_ns_t arg3 ;
  kuzu_timestamp_ns_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (kuzu_timestamp_ns_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_timestamp_ns_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_timestamp_ns(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_timestamp_sec(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  kuzu_timestamp_sec_t arg3 ;
  kuzu_timestamp_sec_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (kuzu_timestamp_sec_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_timestamp_sec_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_timestamp_sec(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_timestamp_tz(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  kuzu_timestamp_tz_t arg3 ;
  kuzu_timestamp_tz_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (kuzu_timestamp_tz_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_timestamp_tz_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_timestamp_tz(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_timestamp_ms(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  kuzu_timestamp_ms_t arg3 ;
  kuzu_timestamp_ms_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (kuzu_timestamp_ms_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_timestamp_ms_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_timestamp_ms(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_timestamp(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  kuzu_timestamp_t arg3 ;
  kuzu_timestamp_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (kuzu_timestamp_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_timestamp_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_timestamp(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_interval(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  kuzu_interval_t arg3 ;
  kuzu_interval_t *argp3 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (kuzu_interval_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_interval_t", 0);
    return ;
  }
  arg3 = *argp3; 
  kuzu_prepared_statement_bind_interval(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_string(void * jarg1, char * jarg2, char * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  kuzu_prepared_statement_bind_string(arg1,(char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_prepared_statement_bind_value(void * jarg1, char * jarg2, void * jarg3) {
  kuzu_prepared_statement *arg1 = (kuzu_prepared_statement *) 0 ;
  char *arg2 = (char *) 0 ;
  kuzu_value *arg3 = (kuzu_value *) 0 ;
  
  arg1 = (kuzu_prepared_statement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (kuzu_value *)jarg3; 
  kuzu_prepared_statement_bind_value(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_query_result_destroy(void * jarg1) {
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  kuzu_query_result_destroy(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_query_result_is_success(void * jarg1) {
  unsigned int jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  bool result;
  
  arg1 = (kuzu_query_result *)jarg1; 
  result = (bool)kuzu_query_result_is_success(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_query_result_get_error_message(void * jarg1) {
  char * jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  char *result = 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  result = (char *)kuzu_query_result_get_error_message(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_query_result_get_num_columns(void * jarg1) {
  unsigned long long jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_query_result *)jarg1; 
  result = kuzu_query_result_get_num_columns(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_query_result_get_column_name(void * jarg1, unsigned long long jarg2) {
  char * jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  uint64_t arg2 ;
  char *result = 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (char *)kuzu_query_result_get_column_name(arg1,SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_query_result_get_column_data_type(void * jarg1, unsigned long long jarg2) {
  void * jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  uint64_t arg2 ;
  kuzu_logical_type *result = 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (kuzu_logical_type *)kuzu_query_result_get_column_data_type(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_query_result_get_num_tuples(void * jarg1) {
  unsigned long long jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_query_result *)jarg1; 
  result = kuzu_query_result_get_num_tuples(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_query_result_get_query_summary(void * jarg1) {
  void * jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  kuzu_query_summary *result = 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  result = (kuzu_query_summary *)kuzu_query_result_get_query_summary(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_query_result_has_next(void * jarg1) {
  unsigned int jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  bool result;
  
  arg1 = (kuzu_query_result *)jarg1; 
  result = (bool)kuzu_query_result_has_next(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_query_result_get_next(void * jarg1) {
  void * jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  kuzu_flat_tuple *result = 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  result = (kuzu_flat_tuple *)kuzu_query_result_get_next(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_query_result_to_string(void * jarg1) {
  char * jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  char *result = 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  result = (char *)kuzu_query_result_to_string(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_query_result_reset_iterator(void * jarg1) {
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  
  arg1 = (kuzu_query_result *)jarg1; 
  kuzu_query_result_reset_iterator(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_query_result_get_arrow_schema(void * jarg1) {
  void * jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  ArrowSchema result;
  
  arg1 = (kuzu_query_result *)jarg1; 
  result = kuzu_query_result_get_arrow_schema(arg1);
  jresult = new ArrowSchema(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_query_result_get_next_arrow_chunk(void * jarg1, long long jarg2) {
  void * jresult ;
  kuzu_query_result *arg1 = (kuzu_query_result *) 0 ;
  int64_t arg2 ;
  ArrowArray result;
  
  arg1 = (kuzu_query_result *)jarg1; 
  arg2 = (int64_t)jarg2; 
  result = kuzu_query_result_get_next_arrow_chunk(arg1,SWIG_STD_MOVE(arg2));
  jresult = new ArrowArray(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_flat_tuple_destroy(void * jarg1) {
  kuzu_flat_tuple *arg1 = (kuzu_flat_tuple *) 0 ;
  
  arg1 = (kuzu_flat_tuple *)jarg1; 
  kuzu_flat_tuple_destroy(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_flat_tuple_get_value(void * jarg1, unsigned long long jarg2) {
  void * jresult ;
  kuzu_flat_tuple *arg1 = (kuzu_flat_tuple *) 0 ;
  uint64_t arg2 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_flat_tuple *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (kuzu_value *)kuzu_flat_tuple_get_value(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_flat_tuple_to_string(void * jarg1) {
  char * jresult ;
  kuzu_flat_tuple *arg1 = (kuzu_flat_tuple *) 0 ;
  char *result = 0 ;
  
  arg1 = (kuzu_flat_tuple *)jarg1; 
  result = (char *)kuzu_flat_tuple_to_string(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_data_type_create(int jarg1, void * jarg2, unsigned long long jarg3) {
  void * jresult ;
  kuzu_data_type_id arg1 ;
  kuzu_logical_type *arg2 = (kuzu_logical_type *) 0 ;
  uint64_t arg3 ;
  kuzu_logical_type *result = 0 ;
  
  arg1 = (kuzu_data_type_id)jarg1; 
  arg2 = (kuzu_logical_type *)jarg2; 
  arg3 = (uint64_t)jarg3; 
  result = (kuzu_logical_type *)kuzu_data_type_create(arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_data_type_clone(void * jarg1) {
  void * jresult ;
  kuzu_logical_type *arg1 = (kuzu_logical_type *) 0 ;
  kuzu_logical_type *result = 0 ;
  
  arg1 = (kuzu_logical_type *)jarg1; 
  result = (kuzu_logical_type *)kuzu_data_type_clone(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_data_type_destroy(void * jarg1) {
  kuzu_logical_type *arg1 = (kuzu_logical_type *) 0 ;
  
  arg1 = (kuzu_logical_type *)jarg1; 
  kuzu_data_type_destroy(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_data_type_equals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  kuzu_logical_type *arg1 = (kuzu_logical_type *) 0 ;
  kuzu_logical_type *arg2 = (kuzu_logical_type *) 0 ;
  bool result;
  
  arg1 = (kuzu_logical_type *)jarg1; 
  arg2 = (kuzu_logical_type *)jarg2; 
  result = (bool)kuzu_data_type_equals(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_kuzu_data_type_get_id(void * jarg1) {
  int jresult ;
  kuzu_logical_type *arg1 = (kuzu_logical_type *) 0 ;
  kuzu_data_type_id result;
  
  arg1 = (kuzu_logical_type *)jarg1; 
  result = (kuzu_data_type_id)kuzu_data_type_get_id(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_data_type_get_fixed_num_elements_in_list(void * jarg1) {
  unsigned long long jresult ;
  kuzu_logical_type *arg1 = (kuzu_logical_type *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_logical_type *)jarg1; 
  result = kuzu_data_type_get_fixed_num_elements_in_list(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_null() {
  void * jresult ;
  kuzu_value *result = 0 ;
  
  result = (kuzu_value *)kuzu_value_create_null();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_null_with_data_type(void * jarg1) {
  void * jresult ;
  kuzu_logical_type *arg1 = (kuzu_logical_type *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_logical_type *)jarg1; 
  result = (kuzu_value *)kuzu_value_create_null_with_data_type(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_value_is_null(void * jarg1) {
  unsigned int jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  bool result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (bool)kuzu_value_is_null(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_value_set_null(void * jarg1, unsigned int jarg2) {
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  bool arg2 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = jarg2 ? true : false; 
  kuzu_value_set_null(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_default(void * jarg1) {
  void * jresult ;
  kuzu_logical_type *arg1 = (kuzu_logical_type *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_logical_type *)jarg1; 
  result = (kuzu_value *)kuzu_value_create_default(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_bool(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  kuzu_value *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (kuzu_value *)kuzu_value_create_bool(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_int8(void * jarg1) {
  void * jresult ;
  int8_t arg1 ;
  int8_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (int8_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int8_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_int8(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_int16(short jarg1) {
  void * jresult ;
  int16_t arg1 ;
  kuzu_value *result = 0 ;
  
  arg1 = (int16_t)jarg1; 
  result = (kuzu_value *)kuzu_value_create_int16(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_int32(int jarg1) {
  void * jresult ;
  int32_t arg1 ;
  kuzu_value *result = 0 ;
  
  arg1 = (int32_t)jarg1; 
  result = (kuzu_value *)kuzu_value_create_int32(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_int64(long long jarg1) {
  void * jresult ;
  int64_t arg1 ;
  kuzu_value *result = 0 ;
  
  arg1 = (int64_t)jarg1; 
  result = (kuzu_value *)kuzu_value_create_int64(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_uint8(void * jarg1) {
  void * jresult ;
  uint8_t arg1 ;
  uint8_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (uint8_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint8_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_uint8(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_uint16(void * jarg1) {
  void * jresult ;
  uint16_t arg1 ;
  uint16_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (uint16_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint16_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_uint16(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_uint32(void * jarg1) {
  void * jresult ;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (uint32_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_uint32(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_uint64(unsigned long long jarg1) {
  void * jresult ;
  uint64_t arg1 ;
  kuzu_value *result = 0 ;
  
  arg1 = (uint64_t)jarg1; 
  result = (kuzu_value *)kuzu_value_create_uint64(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_int128(void * jarg1) {
  void * jresult ;
  kuzu_int128_t arg1 ;
  kuzu_int128_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (kuzu_int128_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_int128_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_int128(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_float(float jarg1) {
  void * jresult ;
  float arg1 ;
  kuzu_value *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (kuzu_value *)kuzu_value_create_float(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_double(double jarg1) {
  void * jresult ;
  double arg1 ;
  kuzu_value *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (kuzu_value *)kuzu_value_create_double(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_internal_id(void * jarg1) {
  void * jresult ;
  kuzu_internal_id_t arg1 ;
  kuzu_internal_id_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (kuzu_internal_id_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_internal_id_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_internal_id(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_date(void * jarg1) {
  void * jresult ;
  kuzu_date_t arg1 ;
  kuzu_date_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (kuzu_date_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_date_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_date(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_timestamp_ns(void * jarg1) {
  void * jresult ;
  kuzu_timestamp_ns_t arg1 ;
  kuzu_timestamp_ns_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (kuzu_timestamp_ns_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_timestamp_ns_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_timestamp_ns(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_timestamp_ms(void * jarg1) {
  void * jresult ;
  kuzu_timestamp_ms_t arg1 ;
  kuzu_timestamp_ms_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (kuzu_timestamp_ms_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_timestamp_ms_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_timestamp_ms(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_timestamp_sec(void * jarg1) {
  void * jresult ;
  kuzu_timestamp_sec_t arg1 ;
  kuzu_timestamp_sec_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (kuzu_timestamp_sec_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_timestamp_sec_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_timestamp_sec(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_timestamp_tz(void * jarg1) {
  void * jresult ;
  kuzu_timestamp_tz_t arg1 ;
  kuzu_timestamp_tz_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (kuzu_timestamp_tz_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_timestamp_tz_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_timestamp_tz(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_timestamp(void * jarg1) {
  void * jresult ;
  kuzu_timestamp_t arg1 ;
  kuzu_timestamp_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (kuzu_timestamp_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_timestamp_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_timestamp(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_interval(void * jarg1) {
  void * jresult ;
  kuzu_interval_t arg1 ;
  kuzu_interval_t *argp1 ;
  kuzu_value *result = 0 ;
  
  argp1 = (kuzu_interval_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_interval_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (kuzu_value *)kuzu_value_create_interval(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_create_string(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (kuzu_value *)kuzu_value_create_string((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_clone(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (kuzu_value *)kuzu_value_clone(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_value_copy(void * jarg1, void * jarg2) {
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_value *arg2 = (kuzu_value *) 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = (kuzu_value *)jarg2; 
  kuzu_value_copy(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_value_destroy(void * jarg1) {
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  kuzu_value_destroy(arg1);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_value_get_list_size(void * jarg1) {
  unsigned long long jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_list_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_list_element(void * jarg1, unsigned long long jarg2) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t arg2 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (kuzu_value *)kuzu_value_get_list_element(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_value_get_struct_num_fields(void * jarg1) {
  unsigned long long jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_struct_num_fields(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_value_get_struct_field_name(void * jarg1, unsigned long long jarg2) {
  char * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t arg2 ;
  char *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (char *)kuzu_value_get_struct_field_name(arg1,SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_struct_field_value(void * jarg1, unsigned long long jarg2) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t arg2 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (kuzu_value *)kuzu_value_get_struct_field_value(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_recursive_rel_node_list(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (kuzu_value *)kuzu_value_get_recursive_rel_node_list(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_recursive_rel_rel_list(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (kuzu_value *)kuzu_value_get_recursive_rel_rel_list(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_data_type(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_logical_type *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (kuzu_logical_type *)kuzu_value_get_data_type(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_value_get_bool(void * jarg1) {
  unsigned int jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  bool result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (bool)kuzu_value_get_bool(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_int8(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  int8_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_int8(arg1);
  jresult = new int8_t(result); 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_kuzu_value_get_int16(void * jarg1) {
  short jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  int16_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_int16(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_kuzu_value_get_int32(void * jarg1) {
  int jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  int32_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_int32(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_kuzu_value_get_int64(void * jarg1) {
  long long jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  int64_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_int64(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_uint8(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint8_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_uint8(arg1);
  jresult = new uint8_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_uint16(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint16_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_uint16(arg1);
  jresult = new uint16_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_uint32(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint32_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_uint32(arg1);
  jresult = new uint32_t(result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_value_get_uint64(void * jarg1) {
  unsigned long long jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_uint64(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_int128(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_int128_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_int128(arg1);
  jresult = new kuzu_int128_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_int128_t_from_string(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  kuzu_int128_t result;
  
  arg1 = (char *)jarg1; 
  result = kuzu_int128_t_from_string((char const *)arg1);
  jresult = new kuzu_int128_t(result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_int128_t_to_string(void * jarg1) {
  char * jresult ;
  kuzu_int128_t arg1 ;
  kuzu_int128_t *argp1 ;
  char *result = 0 ;
  
  argp1 = (kuzu_int128_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null kuzu_int128_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (char *)kuzu_int128_t_to_string(SWIG_STD_MOVE(arg1));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_kuzu_value_get_float(void * jarg1) {
  float jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  float result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (float)kuzu_value_get_float(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_kuzu_value_get_double(void * jarg1) {
  double jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  double result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (double)kuzu_value_get_double(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_internal_id(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_internal_id_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_internal_id(arg1);
  jresult = new kuzu_internal_id_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_date(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_date_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_date(arg1);
  jresult = new kuzu_date_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_timestamp(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_timestamp_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_timestamp(arg1);
  jresult = new kuzu_timestamp_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_timestamp_ns(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_timestamp_ns_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_timestamp_ns(arg1);
  jresult = new kuzu_timestamp_ns_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_timestamp_ms(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_timestamp_ms_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_timestamp_ms(arg1);
  jresult = new kuzu_timestamp_ms_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_timestamp_sec(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_timestamp_sec_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_timestamp_sec(arg1);
  jresult = new kuzu_timestamp_sec_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_timestamp_tz(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_timestamp_tz_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_timestamp_tz(arg1);
  jresult = new kuzu_timestamp_tz_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_interval(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_interval_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_value_get_interval(arg1);
  jresult = new kuzu_interval_t(result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_value_get_string(void * jarg1) {
  char * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  char *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (char *)kuzu_value_get_string(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_value_get_blob(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (uint8_t *)kuzu_value_get_blob(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_value_get_uuid(void * jarg1) {
  char * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  char *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (char *)kuzu_value_get_uuid(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_value_to_string(void * jarg1) {
  char * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  char *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (char *)kuzu_value_to_string(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_node_val_get_id_val(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (kuzu_value *)kuzu_node_val_get_id_val(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_node_val_get_label_val(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (kuzu_value *)kuzu_node_val_get_label_val(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_node_val_get_property_size(void * jarg1) {
  unsigned long long jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_node_val_get_property_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_node_val_get_property_name_at(void * jarg1, unsigned long long jarg2) {
  char * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t arg2 ;
  char *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (char *)kuzu_node_val_get_property_name_at(arg1,SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_node_val_get_property_value_at(void * jarg1, unsigned long long jarg2) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t arg2 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (kuzu_value *)kuzu_node_val_get_property_value_at(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_node_val_to_string(void * jarg1) {
  char * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  char *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (char *)kuzu_node_val_to_string(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rel_val_get_src_id_val(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (kuzu_value *)kuzu_rel_val_get_src_id_val(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rel_val_get_dst_id_val(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (kuzu_value *)kuzu_rel_val_get_dst_id_val(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rel_val_get_label_val(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (kuzu_value *)kuzu_rel_val_get_label_val(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_rel_val_get_property_size(void * jarg1) {
  unsigned long long jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rel_val_get_property_size(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_rel_val_get_property_name_at(void * jarg1, unsigned long long jarg2) {
  char * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t arg2 ;
  char *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (char *)kuzu_rel_val_get_property_name_at(arg1,SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rel_val_get_property_value_at(void * jarg1, unsigned long long jarg2) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t arg2 ;
  kuzu_value *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  result = (kuzu_value *)kuzu_rel_val_get_property_value_at(arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_rel_val_to_string(void * jarg1) {
  char * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  char *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (char *)kuzu_rel_val_to_string(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_kuzu_rdf_variant_get_type(void * jarg1) {
  int jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_data_type_id result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (kuzu_data_type_id)kuzu_rdf_variant_get_type(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_rdf_variant_get_string(void * jarg1) {
  char * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  char *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (char *)kuzu_rdf_variant_get_string(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rdf_variant_get_blob(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (uint8_t *)kuzu_rdf_variant_get_blob(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_kuzu_rdf_variant_get_int64(void * jarg1) {
  long long jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  int64_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_int64(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_kuzu_rdf_variant_get_int32(void * jarg1) {
  int jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  int32_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_int32(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_kuzu_rdf_variant_get_int16(void * jarg1) {
  short jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  int16_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_int16(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rdf_variant_get_int8(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  int8_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_int8(arg1);
  jresult = new int8_t(result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_rdf_variant_get_uint64(void * jarg1) {
  unsigned long long jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint64_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_uint64(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rdf_variant_get_uint32(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint32_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_uint32(arg1);
  jresult = new uint32_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rdf_variant_get_uint16(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint16_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_uint16(arg1);
  jresult = new uint16_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rdf_variant_get_uint8(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  uint8_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_uint8(arg1);
  jresult = new uint8_t(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_kuzu_rdf_variant_get_float(void * jarg1) {
  float jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  float result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (float)kuzu_rdf_variant_get_float(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_kuzu_rdf_variant_get_double(void * jarg1) {
  double jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  double result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (double)kuzu_rdf_variant_get_double(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_kuzu_rdf_variant_get_bool(void * jarg1) {
  unsigned int jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  bool result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = (bool)kuzu_rdf_variant_get_bool(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rdf_variant_get_date(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_date_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_date(arg1);
  jresult = new kuzu_date_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rdf_variant_get_timestamp(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_timestamp_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_timestamp(arg1);
  jresult = new kuzu_timestamp_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_kuzu_rdf_variant_get_interval(void * jarg1) {
  void * jresult ;
  kuzu_value *arg1 = (kuzu_value *) 0 ;
  kuzu_interval_t result;
  
  arg1 = (kuzu_value *)jarg1; 
  result = kuzu_rdf_variant_get_interval(arg1);
  jresult = new kuzu_interval_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_destroy_string(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  kuzu_destroy_string(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_kuzu_query_summary_destroy(void * jarg1) {
  kuzu_query_summary *arg1 = (kuzu_query_summary *) 0 ;
  
  arg1 = (kuzu_query_summary *)jarg1; 
  kuzu_query_summary_destroy(arg1);
}


SWIGEXPORT double SWIGSTDCALL CSharp_kuzu_query_summary_get_compiling_time(void * jarg1) {
  double jresult ;
  kuzu_query_summary *arg1 = (kuzu_query_summary *) 0 ;
  double result;
  
  arg1 = (kuzu_query_summary *)jarg1; 
  result = (double)kuzu_query_summary_get_compiling_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_kuzu_query_summary_get_execution_time(void * jarg1) {
  double jresult ;
  kuzu_query_summary *arg1 = (kuzu_query_summary *) 0 ;
  double result;
  
  arg1 = (kuzu_query_summary *)jarg1; 
  result = (double)kuzu_query_summary_get_execution_time(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_kuzu_get_version() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)kuzu_get_version();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_kuzu_get_storage_version() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = kuzu_get_storage_version();
  jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

